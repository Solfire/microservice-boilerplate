#!/usr/bin/env node

const throng = require('throng');
const https = require('https');
const fs = require('fs');

const app = require('../src/app');
const logger = require('../src/util/logger');

const PATH_TO_CERT = './config/ssl/example.crt';
const PATH_TO_BUNDLE_CERT_1 = './config/ssl/example.crt';
const PATH_TO_KEY = './config/ssl/example.key';

const options = {
  ca: fs.readFileSync(PATH_TO_BUNDLE_CERT_1, 'ascii'),
  cert: fs.readFileSync(PATH_TO_CERT, 'ascii'),
  key: fs.readFileSync(PATH_TO_KEY, 'ascii')
};

function worker() {
  /**
     * Get port from environment and store in Express.
     */
  const port = normalizePort(process.env.PORT || 3005);
  app.set('port', port);

  /**
     * Create HTTP server.
     */

  const server = https.createServer(options, app);

  /**
     * Listen on provided port, on all network interfaces.
     */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  /**
     * Normalize a port into a number, string, or false.
     */

  function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
     * Event listener for HTTP server 'error' event.
     */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    const bind = typeof port === 'string' ?
      `Pipe ${port}` :
      `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(`${bind} requires elevated privileges`);
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(`${bind} is already in use`);
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
     * Event listener for HTTP server 'listening' event.
     */

  function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
      `pipe ${addr}` :
      `port ${addr.port}`;
    logger.info(`Listening on ${bind}`);
  }
}

throng(worker);
